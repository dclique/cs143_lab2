package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate m_jp;
    private DbIterator m_ch1;
    private DbIterator m_ch2;
    private Tuple ch1next;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	m_jp = p;
    	m_ch1 = child1;
    	m_ch2 = child2;
    	ch1next = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return m_ch1.getTupleDesc().getFieldName(m_jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return m_ch2.getTupleDesc().getFieldName(m_jp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(m_ch1.getTupleDesc(), m_ch2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	m_ch1.open();
    	m_ch2.open();
    }

    public void close() {
        // some code goes here
    	m_ch1.close();
    	m_ch2.close();
    	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	m_ch1.rewind();
    	m_ch2.rewind();
    	ch1next = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	while(ch1next != null || m_ch1.hasNext()){
    		if(ch1next == null)
    			ch1next = m_ch1.next();
    		
    		while(m_ch2.hasNext()){
    			Tuple ch2next = m_ch2.next();
    			
    			if(m_jp.filter(ch1next, ch2next)){
    				Tuple merged = new Tuple(TupleDesc.merge(m_ch1.getTupleDesc(), m_ch2.getTupleDesc()));
    				
    				int i = 0;
    				for(i = 0; i < ch1next.getTupleDesc().numFields(); i++){
    					merged.setField(i, ch1next.getField(i));
    					
    				}
    				for(int j = i; j < ch2next.getTupleDesc().numFields()+i; j++){
    					merged.setField(j, ch2next.getField(j-i));
    				}
    				return merged;
    			}
    			
    		}
    		m_ch2.rewind();
    		ch1next = null;
    	}
    	
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {m_ch1, m_ch2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	m_ch1 = children[0];
    	m_ch2 = children[1];
    }

}
